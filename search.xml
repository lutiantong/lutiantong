<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>php常用设计模式</title>
    <url>/2020/09/10/php/designpatten/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p> 所谓的单例模式，就是指在应用程序中最多只有一个该类的实例存在，一旦创建，就会存在于内存中，不可被克隆，不可被<code>new()</code>实例化</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>单例模式通常被应用于数据库设计，采用单例模式，一个应用程序内只打开一次数据库链接，防止打开多个数据库链接</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>· 三私一公<br></br><br><strong>私有的构造方法__construct</strong> 用以阻止类被<code>new()</code><br><br /><br><strong>私有的克隆方法__clone()</strong> 用以阻止类被<code>clone</code><br><br /><br><strong>私有的静态变量$instance;</strong> 存放实例<br><br/><br><strong>公有的静态方法 static Instance()</strong> 用以对外部提供实例<br><br/></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote>
<p>代码演示如下</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的静态变量存放实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的克隆方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共的静态方法对外提供实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Instance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> Connection)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><p>工厂模式通常来说是根据输入的参数不同或者应用程序配置的不同来创建一种专门用来创建实例并且返回对应类的实例</p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>使用new 实例化具体类，每次需要使用到类时只需要调用工厂类的方法即可。通常会根据应用项目来具体开发</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>使用工厂模式，可以在你想要更改所实例化的类名等时，只需要更改该工厂方法的内容即可，不需要逐一寻找代码中的具体实例化的地方去修改，为系统结构提供灵活的动态扩展机制，减少耦合</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>to be continued</p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp6-vue跨域Session/cookie共享问题</title>
    <url>/2021/09/17/php/thinkphp6session/</url>
    <content><![CDATA[<h2 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h2><p>   基于公司业务，在对原有的Yii2开发的前后端不分离的前台项目进行重构，技术选型上，出于后期方便招人维护考虑，后端使用了thinkphp6框架来替代原来的<br> Yii2框架进行开发，前端则使用vue完成业务流页面。部分需要做SEO优化的页面采用前后端不分离的形式完成，前端完成页面后，使用thinkphp6 的View模块渲染<br> 由此引发出一个问题，需要在vue端和静态页面端实现登陆信息共享</p>
<hr>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用户从前后端分离模块进入到由php渲染的页面时，需要判断用户的登陆状态来显示一些数据信息。api接口上，是使用header携带APP-TOKEN<br>来完成判断的，同时，前端VUE将用户信息存储在Local Storage。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>方案一<br> 通过JS获取Local Storage的内容，来获取用户信息，在公共头部判断用户是否登陆，以此来展示用户信息<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> vuex = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;vuex&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> useInfo</span><br><span class="line">    vuex = <span class="built_in">JSON</span>.parse(vuex);</span><br><span class="line">    <span class="keyword">let</span> Dom = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;longinregister&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> DomName = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;longinregisterName&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(vuex &amp;&amp; vuex.userInfo)&#123;</span><br><span class="line">        useInfo = vuex.userInfo</span><br><span class="line">        Dom[<span class="number">0</span>].style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        Dom[<span class="number">1</span>].style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        DomName.innerHTML = <span class="string">&#x27;&lt;a role=&quot;button&quot; class=&quot;go-out&quot; onclick=&quot;logout()&quot;&gt;退出&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.clear()</span><br><span class="line">        sessionStorage.clear()</span><br><span class="line">        <span class="built_in">window</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
此方法可以在前端展示的时候，根据Local Storage中的内容判断用户是否登陆，但是以上方法只是在前端页面上实现了数据展示，<br>php服务端依然无法获取到当前用户是否登陆以及登陆信息</li>
<li>通过共享Session的方式<br>通过观察接口请求信息发现，每次vue在请求服务端API接口时，所携带的PHPSESSIONID每次都不一样，经过Google以及百度多方查询后，得到了如下解决办法<blockquote>
<p>Vue里<code>withCredentials</code>设置为false后，每次请求会不携带cookie信息，而Session是依赖于Cookie的，所以会导致每次请求的Session不一致</p>
</blockquote>
</li>
</ol>
<p>于是，修改属性</p>
<p><code>axios.defaults.withCredentials = true; //意思是携带cookie信息,保持session的一致性</code></p>
<p>同时，在php跨域请求中设置</p>
<p><code>header(&quot;Access-Control-Allow-Credentials:true&quot;)</code></p>
<p>设置完之后又出现了新的问题，将<code>Access-Control-Allow-Credentials</code>设置为true时 <code>Access-Control-Allow-Origin</code>不能设置为* * * 所以需要设置请求域名</p>
<p>以上便完成了前后端分离与前后端不分离的Session/Cookie数据互通</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>前后端分离请求的接口域名，需要与php渲染页面的域名保持在同一个主域名下 且需要在thinkphp中设置Cookie的作用域域名，代码如下:<br><br />config/cookie.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// cookie 保存时间</span></span><br><span class="line">    <span class="string">&#x27;expire&#x27;</span>    =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// cookie 保存路径</span></span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>      =&gt; <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="comment">// cookie 有效域名</span></span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>    =&gt; <span class="string">&#x27;.domain.com&#x27;</span>,</span><br><span class="line">    <span class="comment">//  cookie 启用安全传输</span></span><br><span class="line">    <span class="string">&#x27;secure&#x27;</span>    =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// httponly设置</span></span><br><span class="line">    <span class="string">&#x27;httponly&#x27;</span>  =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 是否使用 setcookie</span></span><br><span class="line">    <span class="string">&#x27;setcookie&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// samesite 设置，支持 &#x27;strict&#x27; &#x27;lax&#x27;</span></span><br><span class="line">    <span class="string">&#x27;samesite&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>ending</p>
]]></content>
      <categories>
        <category>后端开发</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp</tag>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>php实现冒泡排序</title>
    <url>/2020/08/12/php/php-bubblephp/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序(Bubble Sort) 属于一种典型的交换排序，对一组数据，比较相邻数据的大小，将值小数据在前面，值大的数据放在后面。</p>
<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">89</span>,<span class="number">13</span>,<span class="number">45</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>$arr</code>有6个数据，按照两两比较大小，将数字更大的交换到后面，数字较小的交换到前面</p>
<blockquote>
<p>1.第一轮排序 将最大的数字放在最后端</p>
<blockquote>
<p>第一次比较12 和 5 结果为5 12 89 13 45 6 <br /><br>第二次比较12 和 89 结果为 5 12 89 13 45 6 <br /><br>第三次比较89 和 13 结果为 5 12 13 89 45 6 <br /><br>第四次比较89 和 45 结果为 5 12 13 45 89 6 <br /><br>第五次比较89 和 6 结果为 5 12 13 45 6 89 <br /></p>
</blockquote>
</blockquote>
</blockquote>
<p>经过第一轮两两比较，可以确定最大的数字89已经到最后端，下一轮只需要比较前面的5个数字即可</p>
<blockquote>
<blockquote>
<p>2.第二轮比较 将第二大的数字放在89的前面</p>
<blockquote>
<p>第一次比较5 和 12 结果为5 12 13 45 6 89<br /><br>第二次比较12 和 12 结果为 5 12 13 45 6 89 <br /><br>第三次比较12 和 45 结果为 5 12 13 45 6 89 <br /><br>第四次比较45 和 6 结果为 5 12 13 6 45 89 <br /></p>
</blockquote>
</blockquote>
</blockquote>
<p>经过第二轮两两比较，可以确定第二大的数字45已经到倒数第二位，下一轮只需要比较前面的4个数字即可</p>
<blockquote>
<blockquote>
<p>3.第三轮比较 将第三大的数字放在45的前面</p>
<blockquote>
<p>第一次比较5 和 12 结果为5 12 13 6 45 89 <br /><br>第二次比较12 和 13 结果为 5 12 13 6 45 89 <br /><br>第三次比较13 和 45 结果为 5 12 13 6 45 89 <br /></p>
</blockquote>
</blockquote>
</blockquote>
<p>经过第三轮两两比较，可以确定第三大的数字13已经到最后端，下一轮只需要比较前面的3个数字即可</p>
<blockquote>
<blockquote>
<p>4.第四轮比较 将第四大的数字放在13前面</p>
<blockquote>
<p>第一次比较5 和 12 结果为5 12 6 13 45 89 <br /><br>第二次比较12 和 6 结果为 5 6 12 13 45 89 <br /></p>
</blockquote>
</blockquote>
</blockquote>
<p>经过第四轮两两比较，可以确定第四大的数字12已经到最后端，下一轮只需要比较前面的2个数字即可</p>
<blockquote>
<blockquote>
<p>5.第五轮比较 判断出第一个数和第二个数谁比较大</p>
<blockquote>
<p>第一次比较5 和 12 结果为5 6 12 13 45 89 <br /></p>
</blockquote>
</blockquote>
</blockquote>
<p>通过以上5轮的排序，若干次的比较，可以得出一个结论<br><br /><br><strong>对于一个长度为N的数组，我们需要排序N-1轮，每i轮比较N-i次，对此，我们可以使用双重循环语句，外层循环控制比较轮次，内层循环控制每轮比较的次数<br><br/>代码展示如下</strong></p>
<h3 id="冒泡排序代码"><a href="#冒泡排序代码" class="headerlink" title="冒泡排序代码"></a>冒泡排序代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一组随机数</span></span><br><span class="line"><span class="variable">$data</span> = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">6</span>;<span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$data</span>[<span class="variable">$i</span>] = mt_rand(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取数组元素个数</span></span><br><span class="line">    <span class="variable">$count</span> = count(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$count</span>-<span class="number">1</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="comment">//定义一个内层循环来比较数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="variable">$count</span>-<span class="number">1</span>-<span class="variable">$i</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="comment">//如果前面的数字比后面的数字大，交换两个数的位置</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$data</span>[<span class="variable">$j</span>] &gt; <span class="variable">$data</span>[<span class="variable">$j</span>+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="variable">$temp</span> = <span class="variable">$data</span>[<span class="variable">$j</span>];<span class="comment">//定义临时变量存储较大的数字</span></span><br><span class="line">                <span class="variable">$data</span>[<span class="variable">$j</span>] = <span class="variable">$data</span>[<span class="variable">$j</span>+<span class="number">1</span>];<span class="comment">//较小的数字往前挪以为</span></span><br><span class="line">                <span class="variable">$data</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$temp</span>;<span class="comment">//较大的数字往后挪一位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端开发</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>冒泡排序</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用go-zero+vue开发商城后台【准备篇】</title>
    <url>/2021/09/18/golang/postgo/</url>
    <content><![CDATA[<blockquote>
<p>to be continued</p>
</blockquote>
]]></content>
      <categories>
        <category>项目练习</category>
        <category>go-zero</category>
      </categories>
      <tags>
        <tag>go-zero</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JsonRpc</title>
    <url>/2021/09/22/other/jsonrpc/</url>
    <content><![CDATA[<h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>在分布式计算，远程过程调用（Remote Procedure Call 缩写 RPC）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一个地址空间（通常为开放网络的一台计算机）的子程序<br>，而程序员就像调用本地程序一样，无需额外的为这个交互作用变成（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过 <strong>发送请求-接收回应</strong>进行信息交互的系统<br>如果设计的软件采用面向对象变成，那么远程过程调用亦可称作为<strong>远程调用</strong>或<strong>远程方法调用</strong><br>RPC是一种进程间通信的模式，程序分布在不同的地址空间里。如果在同一主机里，RPC可以通过不同的虚拟地址空间（即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的物理地址进行交互。许多技术（通常是不兼容）都是基于这种概念而实现的。</p>
<blockquote>
<p>以上摘自维基百科</p>
</blockquote>
<blockquote>
<p>to be continued</p>
</blockquote>
]]></content>
      <categories>
        <category>开发必备</category>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>JsonRpc</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka安装与配置</title>
    <url>/2021/09/26/kafka/kafka/</url>
    <content><![CDATA[<h2 id="一、kafka介绍"><a href="#一、kafka介绍" class="headerlink" title="一、kafka介绍"></a>一、kafka介绍</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h3><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p>
<p>根据官网介绍，Kafka是一个分布式流媒体平台，它主要有3种功能</p>
<ol>
<li>It lets you publish and subscribe to streams of records.  发布和订阅消息流，这个功能类似于消息队列，这也是kafka归类为消息队列框架的原因</li>
<li>It lets you store streams of records in a fault-tolerant way.以容错的方式记录消息流，kafka以文件的方式来存储消息流</li>
<li>It lets you process streams of records as they occur.可以再消息发布的时候进行处理</li>
</ol>
<p>Kafka主要设计目标如下：  </p>
<ul>
<li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。  </li>
<li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输。  </li>
<li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输。</li>
<li>同时支持离线数据处理和实时数据处理。</li>
<li>Scale out:支持在线水平扩展</li>
</ul>
<h3 id="1-2-专业术语"><a href="#1-2-专业术语" class="headerlink" title="1.2 专业术语"></a>1.2 专业术语</h3><ul>
<li>Topic：特指Kafka处理的消息源（feeds of messages）的不同分类。</li>
<li>Partition：Topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。</li>
<li>Message：消息，是通信的基本单位，每个producer可以向一个topic（主题）发布一些消息。</li>
<li>Producers：消息和数据生产者，向Kafka的一个topic发布消息的过程叫做producers。</li>
<li>Consumers：消息和数据消费者，订阅topics并处理其发布的消息的过程叫做consumers。</li>
<li>Broker：缓存代理，Kafa集群中的一台或多台服务器统称为broker。</li>
</ul>
<hr>
<p><em><font size=1 color=red>以上都是废话，重在个人理解</font></em></p>
<hr>
<h2 id="二、kafka安装"><a href="#二、kafka安装" class="headerlink" title="二、kafka安装"></a>二、kafka安装</h2><h3 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a>2.1 下载安装</h3><ul>
<li><p>官网下载 :<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz</span><br></pre></td></tr></table></figure></li>
<li><p>解压文件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -C /usr/local -zxvf kafka_2.13-3.0.0.tgz</span><br></pre></td></tr></table></figure></li>
<li><p>进入kafka目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/kafka_2.13-3.0.0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-Zookeeper配置"><a href="#2-2-Zookeeper配置" class="headerlink" title="2.2 Zookeeper配置"></a>2.2 Zookeeper配置</h3><p>kafka依赖zookeeper ，所以需要安装配置Zookeeper<br>当前下载的kafka程序里自带Zookeeper,可以直接使用其自带的Zookeeper建立集群，也可以使用Zookeeper安装文件建立集群</p>
<ol>
<li><p>java环境安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li>
<li><p>单独使用zookeeper安装文件建立集群 </p>
<blockquote>
<p>to be continued</p>
</blockquote>
</li>
<li><p>直接使用其自带的zookeeper建立集群<br>kafka自带的Zookeeper程序脚本与配置文件名与原生Zookeeper稍有不同。<br>kafka自带的Zookeeper程序使用bin/zookeeper-server-start.sh，以及bin/zookeeper-server-stop.sh来启动和停止Zookeeper。<br>而Zookeeper的配制文件是config/zookeeper.properties，可以修改其中的参数</p>
<blockquote>
<p>启动Zookeeper</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure>
<p><em><code>-daemon</code> 后台运行Zookeeper <code>config/zookeeper.properties</code> zookeeper配置文件 输出的日志保存在<code>logs/zookeeper.out</code>文件中</em></p>
<blockquote>
<p>关闭Zookeeper</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/zookeeper-server-stop.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure>
<p><em>这里出现了一点小问题，在测试关闭的时候，返回给我了一个<code>No zookeeper server to stop</code> 查看日志发现<code>nohup: failed to run command &#39;java&#39;: No such file or directory</code>没有java环境，于是又回去重新安装java</em></p>
</li>
</ol>
<hr>
<h2 id="三、-kafka的使用"><a href="#三、-kafka的使用" class="headerlink" title="三、 kafka的使用"></a>三、 kafka的使用</h2><h3 id="3-1-配置zookeeper集群"><a href="#3-1-配置zookeeper集群" class="headerlink" title="3.1 配置zookeeper集群"></a>3.1 配置zookeeper集群</h3><p>因为当前环境是wsl环境下单台主机配置集群，所以需要设置多个zookeeper，且需要设置不同的端口</p>
<ol>
<li>修改zookeeper.properties文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd config/</span><br><span class="line">cp zookeeper.properties zookeeper1.properties</span><br><span class="line">cp zookeeper.properties zookeeper2.properties</span><br></pre></td></tr></table></figure>
 编辑配置文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim zookeeper1.properties</span><br></pre></td></tr></table></figure>
 <em>clientPort参数代表端口，默认端口为2181 这里修改第二个为2182</em> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2182</span><br><span class="line"># disable the per-ip limit on the number of connections since this is a non-production config</span><br><span class="line">maxClientCnxns=0</span><br><span class="line"># Disable the adminserver by default to avoid port conflicts.</span><br><span class="line"># Set the port to something non-conflicting if choosing to enable this</span><br><span class="line">admin.enableServer=false</span><br><span class="line"># admin.serverPort=8080</span><br></pre></td></tr></table></figure>
 通过同样的方法将zookeeper2.properties 端口改成2183</li>
<li>启动服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper1.properties</span><br><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper2.properties</span><br></pre></td></tr></table></figure>
<font size=2 color=red>这里如果不做集群调试的话，可以忽略，按照前文方法启动</font></li>
</ol>
<h3 id="3-2修改kafka配置文件"><a href="#3-2修改kafka配置文件" class="headerlink" title="3.2修改kafka配置文件"></a>3.2修改kafka配置文件</h3><p>kafka的配置文件在config/server.properties文件中，主要修改参数如下，更具体的参数说明以后再整理下。  </p>
<p><code>broker.id</code>是kafka broker的编号，集群里每个broker的id需不同，一般是从0开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id=0</span><br></pre></td></tr></table></figure>
<p><code>listeners</code>是监听地址，需要提供外网服务的话，要设置本地的IP地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The address the socket server listens on. It will get the value returned from</span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners = listener_name://host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="line">listeners=PLAINTEXT://127.0.0.1:9092</span><br></pre></td></tr></table></figure>

<p><code>zookeeper.connect</code> 设置Zookeeper集群地址，我是在同一个服务器上搭建了kafka和Zookeeper，所以填的本地地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</span><br></pre></td></tr></table></figure>
<p><code>log.dirs</code>是日志目录，需要设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">############################# Log Basics #############################</span><br><span class="line"></span><br><span class="line"># A comma separated list of directories under which to store log files</span><br><span class="line">log.dirs=/tmp/kafka-logs</span><br></pre></td></tr></table></figure>

<p><code>num.partitions</code> 为新建<code>Topic</code>的默认<code>Partition</code>数量，<code>partition</code>数量提升，一定程度上可以提升并发性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The default number of log partitions per topic. More partitions allow greater</span><br><span class="line"># parallelism for consumption, but this will also result in more files across</span><br><span class="line"># the brokers.</span><br><span class="line">num.partitions=1</span><br></pre></td></tr></table></figure>

<p>内部topic配置</p>
<p>内部__consumer_offsets和__transaction_state两个topic，分组元数据的复制因子，为了保证可用性，在生产上建议设置大于1。</p>
<p>default.replication.factor为kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务，是在自动创建topic时的默认副本数，可以设置为3</p>
<h3 id="3-3-kafka启动及停止"><a href="#3-3-kafka启动及停止" class="headerlink" title="3.3 kafka启动及停止"></a>3.3 kafka启动及停止</h3><ol>
<li>启动kafka<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>
-daemon 参数会将任务转入后台运行，输出日志信息将写入日志文件，日志文件在执行命令的目录下的logs目录中kafkaServer.out，结尾输同started说明启动成功。</li>
<li>停止kafka<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-server-stop.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>kafka和Zookeeper已启动完成</p>
<ol>
<li>创建topic<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>消息队列</category>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>ubuntu</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
</search>
